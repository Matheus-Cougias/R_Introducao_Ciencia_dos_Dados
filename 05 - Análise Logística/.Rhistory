dados$month <- as.factor(dados$month)
dados$duration <- as.factor(dados$duration)
dados$campaign <- as.factor(dados$campaign)
dados$pdays <- as.factor(dados$pdays)
dados$previous <- as.factor(dados$previous)
dados$poutcome <- as.factor(dados$poutcome)
# A partir da análise da relação entre a variável resposta (que é a aceitação ou não
# de comprar o serviço), podemos obter algumas ideias iniciais do que poderá ocorrer
# quando estudarmos nosso modelo de regressão.
plot(age ~ y, data=dados, pch=19, col="light blue")
# A partir da análise da relação entre a variável resposta (que é a aceitação ou não
# de comprar o serviço), podemos obter algumas ideias iniciais do que poderá ocorrer
# quando estudarmos nosso modelo de regressão.
plot(age ~ y, data=dados, pch=19, col="light blue")
plot(y ~ job, data=dados)
plot(y ~ marital, data=dados)
plot(y ~ education, data=dados)
plot(y ~ default, data=dados)
plot(balance ~ y, data=dados, pch=19, col="light blue", outline=TRUE)
plot(y ~ housing, data=dados)
plot(y ~ loan, data=dados)
plot(y ~ contact, data=dados)
plot(y ~ day, data=dados)
plot(y ~ as.factor(day), data=dados)
plot(y ~  month, data=dados)
plot(duration ~ y, data=dados)
plot(campaign ~ y, data=dados, pch=19, col="light blue", outline=TRUE)
plot(pdays ~ y, data=dados, pch=19, col="light blue", outline=TRUE)
rm(list=ls(all=TRUE))
# Leitura do banco de dados
dados <- read.csv2("bank-full.csv")
# Manipulacao dos dados - Realiza a redefinção da coluna da variável categórica, pois o
# R considerou as variáveis em ordem alfabetica, ao invés de utilizar a ordem
# correta dos meses do ano.
dados$month <- factor(dados$month,
levels = c("jan","feb","mar","apr","may",
"jun","jul","aug","sep","oct",
"nov","dec"))
# Identifica os primeiros dados da tabela
head(dados)
# Imprime o sumário do banco de dados, para compreender melhor as variáveis
summary(dados)
# O comando table(y) me diz qual o total dos clientes que aceitaram o serviço
# e qual o total dos clientes não aceitaram. O resultado mostra que em torno de
# 12% dos clientes aceitaram o serviço. Isso faz com que a base seja desbalanceada,
# pois a proporção de um lado é muito maior que do outro. Como solução para esse
# problema, podemos tanto inflar a base de dados para igualar as proporções,
# ou então retirar uma quantidade de dados para igualar os lados.
table(dados$y)/sum( table(dados$y) )
dados$y <- as.factor(dados$y)
dados$job <- as.factor(dados$job)
dados$marital <- as.factor(dados$marital)
dados$education <- as.factor(dados$education)
dados$default <- as.factor(dados$default)
dados$housing <- as.factor(dados$housing)
dados$loan <- as.factor(dados$loan)
dados$contact <- as.factor(dados$contact)
dados$day <- as.factor(dados$day)
dados$month <- as.factor(dados$month)
dados$poutcome <- as.factor(dados$poutcome)
# A partir da análise da relação entre a variável resposta (que é a aceitação ou não
# de comprar o serviço), podemos obter algumas ideias iniciais do que poderá ocorrer
# quando estudarmos nosso modelo de regressão.
plot(age ~ y, data=dados, pch=19, col="light blue")
plot(y ~ job, data=dados)
plot(y ~ marital, data=dados)
plot(y ~ education, data=dados)
plot(y ~ default, data=dados)
plot(balance ~ y, data=dados, pch=19, col="light blue", outline=TRUE)
plot(y ~ housing, data=dados)
plot(y ~ loan, data=dados)
plot(y ~ contact, data=dados)
plot(y ~ day, data=dados)
plot(y ~ as.factor(day), data=dados)
plot(y ~  month, data=dados)
plot(duration ~ y, data=dados)
plot(campaign ~ y, data=dados, pch=19, col="light blue", outline=TRUE)
plot(pdays ~ y, data=dados, pch=19, col="light blue", outline=TRUE)
plot(previous ~ y, data=dados, pch=19, col="light blue", outline=TRUE)
plot(y ~ poutcome, data=dados)
# Como exemplo, podemos pegar a regressão entre os meses e a aceitação do
# produto oferecido. Calculamos o valor da probabilidade de alguém comprar
# em determinado mês através da fórmula: exp(valor)/(1+exp(valor)).
# Nesse caso, utilizamos:
# valor = Estimate(Intercept) + Estimate(mês)
# Outra conclusão que podemos retirar é de que o comportamento dos meses
# onde o p-valor é extremamente alto, seu comportamento será similar ao
# do mês retirado como Intercept, que no caso do teste é janeiro.
modelo <- glm(y ~ month, family=binomial, data=dados)
summary(modelo)
# Como o objetivo é estudar TODO o modelo, realizamos um ajuste do mesmo
# utilizando TODAS as variáveis possíveis encontradas. Nas variáveis
# contínuas, consideramos que quanto maior for o valor (por exemplo a
# idade), será acrescida da probabilidade aquele valor do Estimate.
# Lembrando que o Intercept foi calculado através da combinação de diversas
# variáveis, que forma um tipo determinado de indivíduo.
# Para montar o melhor possível modelo, no caso das categóricas, utilizamos
# a configuração que gerará a melhor probabilidade de compra do serviço.
modelo <- glm(y ~ ., family=binomial, data=dados)
summary(modelo)
# Uma possibilidade é aplicar o step para que as variáveis pouco representativas
# sejam retiradas do modelo, para que a análise seja facilitada.
modelo <- step(modelo)
summary(modelo)
# Outra possibilidade é montar o próprio modelo, selecionando a partir da
# leitura dos dados quais variáveis devem ser retiradas.
modelo <- glm(y ~ .-age-default-pdays-previous,
family=binomial, data=dados)
summary(modelo)
with( modelo, 1-pchisq(deviance, df.residual) )
dados$fit <- predict(modelo, type="response")
plot(fit ~ y, data=dados)
install.packages("pROC")
install.packages("packHV")
knitr::opts_chunk$set(echo = FALSE)
require(readr)
require(pROC)
require(rpart)
require(rpart.plot)
require(randomForest)
require(dplyr)
#occupancy <- read.csv("datatraining.txt")[,-1]
adult <- read_csv("adult.data", col_names = FALSE)
adult <- adult[-19610,]
adult=adult %>% mutate_if(is.character, as.factor)
View(adult)
require(readr)
require(pROC)
require(rpart)
require(rpart.plot)
require(randomForest)
require(dplyr)
#occupancy <- read.csv("datatraining.txt")[,-1]
adult <- read_csv("adult.data", col_names = FALSE)
adult <- adult[-19610,]
adult=adult %>% mutate_if(is.character, as.factor)
adult %>%
rename(
X1 = Idade,
X2 = Trabalho,
X3 = Fnlwgt,
X4 = Escolaridade,
X5 = Num_escolaridade,
X6 = Est_Civil,
X7 = Profissao,
X8 = Relacionamento,
X9 = Cor,
X10 = Sexo,
X11 = Ganhos,
X12 = Perdas,
X13 = Horas_semanais,
X14 = Pais,
X15 = Renda
)
require(readr)
require(pROC)
require(rpart)
require(rpart.plot)
require(randomForest)
require(dplyr)
#occupancy <- read.csv("datatraining.txt")[,-1]
adult <- read_csv("adult.data", col_names = FALSE)
adult <- adult[-19610,]
adult=adult %>% mutate_if(is.character, as.factor)
adult %>%
rename(
Idade = X1,
Trabalho = X2,
Fnlwgt = X3,
Escolaridade = X4,
Num_escolaridade = X5,
Est_Civil = X6,
Profissao = X7,
Relacionamento = X8,
Cor = X9,
Sexo = X10,
Ganhos = X11,
Perdas = X12,
Horas_semanais = X13,
Pais = X14,
Renda = X15
)
View(adult)
require(readr)
require(pROC)
require(rpart)
require(rpart.plot)
require(randomForest)
require(dplyr)
require(tidyverse)
#occupancy <- read.csv("datatraining.txt")[,-1]
adult <- read_csv("adult.data", col_names = FALSE)
adult <- adult[-19610,]
adult=adult %>% mutate_if(is.character, as.factor)
adult %>%
rename(
Idade = X1,
Trabalho = X2,
Fnlwgt = X3,
Escolaridade = X4,
Num_escolaridade = X5,
Est_Civil = X6,
Profissao = X7,
Relacionamento = X8,
Cor = X9,
Sexo = X10,
Ganhos = X11,
Perdas = X12,
Horas_semanais = X13,
Pais = X14,
Renda = X15
)
View(adult)
View(adult)
require(readr)
require(pROC)
require(rpart)
require(rpart.plot)
require(randomForest)
require(dplyr)
#occupancy <- read.csv("datatraining.txt")[,-1]
adult <- read_csv("adult.data", col_names = FALSE)
adult <- adult[-19610,]
adult=adult %>% mutate_if(is.character, as.factor)
colnames(X1) <- 'Idade'
require(readr)
require(pROC)
require(rpart)
require(rpart.plot)
require(randomForest)
require(dplyr)
#occupancy <- read.csv("datatraining.txt")[,-1]
adult <- read_csv("adult.data", col_names = FALSE)
adult <- adult[-19610,]
adult=adult %>% mutate_if(is.character, as.factor)
colnames(adult) <- c('Idade', 'Trabalho', 'Fnlwgt', 'Escolaridade', 'Num_escolaridade', 'Est_Civil', 'Profissao', 'Relacionamento', 'Cor',
'Sexo', 'Ganhos', 'Perdas', 'Horas_semanais', 'Pais', 'Renda')
View(adult)
dadosadul <- adult
dadosadul <- adult
dadosadul <- dadosadul[dadosadul$Pais != " Holand-Netherlands" ,]
folds <- cut( seq(1,nrow(dadosadul)), breaks=10, labels=FALSE)
folds <- sample(folds, size=length(folds))
## Modelo Logistico
Ypredict <- rep(NA, nrow(dadosadul))
for(fld in 1:2){
testIndexes <- which(folds==fld, arr.ind=TRUE)
modelo <- glm(V15 ~ ., family=binomial, data=dadosadul[-testIndexes,])
Ypredict[testIndexes] <- predict(modelo, newdata=dadosadul[testIndexes,], type="response")
}
dadosadul <- adult
dadosadul <- dadosadul[dadosadul$Pais != " Holand-Netherlands" ,]
folds <- cut( seq(1,nrow(dadosadul)), breaks=10, labels=FALSE)
folds <- sample(folds, size=length(folds))
## Modelo Logistico
Ypredict <- rep(NA, nrow(dadosadul))
for(fld in 1:2){
testIndexes <- which(folds==fld, arr.ind=TRUE)
modelo <- glm(Renda ~ ., family=binomial, data=dadosadul[-testIndexes,])
Ypredict[testIndexes] <- predict(modelo, newdata=dadosadul[testIndexes,], type="response")
}
roc(dadosadul$Renda, Ypredict)$auc
## Random Forest
Ypredict <- rep(NA, nrow(dadosadul))
for(fld in 1:2){
testIndexes <- which(folds==fld, arr.ind=TRUE)
modeloRF <- randomForest(as.factor(Renda) ~ ., data=dadosadul[-testIndexes,])
Ypredict[testIndexes] <- predict(modeloRF, newdata=dadosadul[testIndexes,], type="prob")[,1]
}
require(readr)
require(pROC)
require(rpart)
require(rpart.plot)
require(randomForest)
require(dplyr)
#occupancy <- read.csv("datatraining.txt")[,-1]
adult <- read_csv("adult.data", col_names = FALSE)
adult <- adult[-19610,]
adult=adult %>% mutate_if(is.character, as.factor)
colnames(adult) <- c('Idade', 'Trabalho', 'Fnlwgt', 'Escolaridade', 'Num_escolaridade', 'Est_Civil', 'Profissao', 'Relacionamento', 'Cor',
'Sexo', 'Ganhos', 'Perdas', 'Horas_semanais', 'Pais', 'Renda')
dadosadul <- adult
dadosadul <- dadosadul[dadosadul$Pais != " Holand-Netherlands" ,]
modeloLog <- glm(Renda ~ ., family=binomial, data=dadosadul)
modeloLog <- step(modeloLog)
knitr::opts_chunk$set(echo = FALSE)
require(readr)
require(pROC)
require(rpart)
require(rpart.plot)
require(randomForest)
require(dplyr)
#occupancy <- read.csv("datatraining.txt")[,-1]
adult <- read_csv("adult.data", col_names = FALSE)
adult <- adult[-19610,]
adult=adult %>% mutate_if(is.character, as.factor)
colnames(adult) <- c('Idade', 'Trabalho', 'Fnlwgt', 'Escolaridade', 'Num_escolaridade', 'Est_Civil', 'Profissao', 'Relacionamento', 'Cor',
'Sexo', 'Ganhos', 'Perdas', 'Horas_semanais', 'Pais', 'Renda')
plot(Idade ~ Renda, data=adult)
plot(Renda ~ Trabalho, data=adult)
plot(Fnlwgt ~ Renda, data=adult)
plot(Renda ~ Escolaridade, data=adult)
plot(Num_escolaridade ~ Renda, data=adult)
plot(Renda ~ Est_Civil, data=adult)
plot(Renda ~ Profissao, data=adult)
plot(Renda ~ Relacionamento, data=adult)
plot(Renda ~ Cor, data=adult)
plot(Renda ~ Sexo, data=adult)
plot(Ganhos ~ Renda, data=adult)
plot(Perdas ~ Renda, data=adult)
plot(Horas_semanais ~ Renda, data=adult)
plot(Renda ~ Pais, data=adult)
plot(Idade ~ Renda, data=adult)
plot(Renda ~ Trabalho, data=adult)
plot(Fnlwgt ~ Renda, data=adult)
plot(Renda ~ Escolaridade, data=adult)
plot(Num_escolaridade ~ Renda, data=adult)
plot(Renda ~ Est_Civil, data=adult)
plot(Renda ~ Profissao, data=adult)
plot(Renda ~ Relacionamento, data=adult)
plot(Renda ~ Cor, data=adult)
plot(Renda ~ Sexo, data=adult)
plot(Ganhos ~ Renda, data=adult)
plot(Perdas ~ Renda, data=adult)
plot(Horas_semanais ~ Renda, data=adult)
plot(Renda ~ Pais, data=adult)
dadosadul <- adult
dadosadul <- dadosadul[dadosadul$Pais != " Holand-Netherlands" ,]
modeloLog <- glm(Renda ~ ., family=binomial, data=dadosadul)
View(modeloLog)
summary(modeloLog)
View(adult)
knitr::opts_chunk$set(echo = FALSE)
require(readr)
require(pROC)
require(rpart)
require(rpart.plot)
require(randomForest)
require(dplyr)
#occupancy <- read.csv("datatraining.txt")[,-1]
adult <- read_csv("adult.data", col_names = FALSE)
adult <- adult[-19610,]
adult=adult %>% mutate_if(is.character, as.factor)
i = seq(1, 32560)
for(x in i){
if (adult$X15 == ">50K"){
adult$X15[x] <- 1
}
else{
adult$X15[x] <- 0
}
}
knitr::opts_chunk$set(echo = FALSE)
require(readr)
require(pROC)
require(rpart)
require(rpart.plot)
require(randomForest)
require(dplyr)
#occupancy <- read.csv("datatraining.txt")[,-1]
adult <- read_csv("adult.data", col_names = FALSE)
adult <- adult[-19610,]
adult=adult %>% mutate_if(is.character, as.factor)
for(i in seq(1, 32560)){
if (adult$X15 == ">50K"){
adult$X15[i] <- 1
}
else{
adult$X15[i] <- 0
}
}
require(readr)
require(pROC)
require(rpart)
require(rpart.plot)
require(randomForest)
require(dplyr)
#occupancy <- read.csv("datatraining.txt")[,-1]
adult <- read_csv("adult.data", col_names = FALSE)
adult <- adult[-19610,]
adult=adult %>% mutate_if(is.character, as.factor)
valores <- seq(1, 32560)
for(i in valores){
}
adult$X15 <- as.factor(adult$X15)
colnames(adult) <- c('Idade', 'Trabalho', 'Fnlwgt', 'Escolaridade', 'Num_escolaridade', 'Est_Civil', 'Profissao', 'Relacionamento', 'Cor',
'Sexo', 'Ganhos', 'Perdas', 'Horas_semanais', 'Pais', 'Renda')
require(readr)
require(pROC)
require(rpart)
require(rpart.plot)
require(randomForest)
require(dplyr)
#occupancy <- read.csv("datatraining.txt")[,-1]
adult <- read_csv("adult.data", col_names = FALSE)
adult <- adult[-19610,]
adult=adult %>% mutate_if(is.character, as.factor)
valores <- seq(1, 32560)
for(i in valores){
if (adult$X15 == ">50K"){
adult$X15[i] <- 1
}
else{
adult$X15[i] <- 0
}
}
require(readr)
require(pROC)
require(rpart)
require(rpart.plot)
require(randomForest)
require(dplyr)
#occupancy <- read.csv("datatraining.txt")[,-1]
adult <- read_csv("adult.data", col_names = FALSE)
adult <- adult[-19610,]
adult=adult %>% mutate_if(is.character, as.factor)
valores <- seq(1, 32560)
for(i in valores){
if (adult$X15 == ">50K"){
adult$X15[i] <- 1
}
else{
adult$X15[i] <- 0
}
}
require(readr)
require(pROC)
require(rpart)
require(rpart.plot)
require(randomForest)
require(dplyr)
#occupancy <- read.csv("datatraining.txt")[,-1]
adult <- read_csv("adult.data", col_names = FALSE)
adult <- adult[-19610,]
adult=adult %>% mutate_if(is.character, as.factor)
valores <- seq(1, 32560)
for(i in valores){
if (adult$X15 & ">50K"){
adult$X15[i] <- 1
}
else{
adult$X15[i] <- 0
}
}
require(readr)
require(pROC)
require(rpart)
require(rpart.plot)
require(randomForest)
require(dplyr)
#occupancy <- read.csv("datatraining.txt")[,-1]
adult <- read_csv("adult.data", col_names = FALSE)
adult <- adult[-19610,]
adult=adult %>% mutate_if(is.character, as.factor)
valores <- seq(1, 32560)
for(i in valores){
if (adult$X15 & ">50K"){
adult$X15[i] <- 1
} else{
adult$X15[i] <- 0
}
}
require(readr)
require(pROC)
require(rpart)
require(rpart.plot)
require(randomForest)
require(dplyr)
#occupancy <- read.csv("datatraining.txt")[,-1]
adult <- read_csv("adult.data", col_names = FALSE)
adult <- adult[-19610,]
adult=adult %>% mutate_if(is.character, as.factor)
View(adult)
require(readr)
require(pROC)
require(rpart)
require(rpart.plot)
require(randomForest)
require(dplyr)
#occupancy <- read.csv("datatraining.txt")[,-1]
adult <- read_csv("adult.data", col_names = FALSE)
adult <- adult[-19610,]
adult=adult %>% mutate_if(is.character, as.factor)
valores <- seq(1, 32560)
for(i in valores){
if (adult$X15[i] & ">50K"){
adult$X15[i] <- 1
} else{
adult$X15[i] <- 0
}
}
require(readr)
require(pROC)
require(rpart)
require(rpart.plot)
require(randomForest)
require(dplyr)
#occupancy <- read.csv("datatraining.txt")[,-1]
adult <- read_csv("adult.data", col_names = FALSE)
adult <- adult[-19610,]
adult=adult %>% mutate_if(is.character, as.factor)
valores <- seq(1, 32560)
for(i in valores){
if (adult$X15[i] == ">50K"){
adult$X15[i] <- 1
} else{
adult$X15[i] <- 0
}
}
adult$X15 <- as.factor(adult$X15)
colnames(adult) <- c('Idade', 'Trabalho', 'Fnlwgt', 'Escolaridade', 'Num_escolaridade', 'Est_Civil', 'Profissao', 'Relacionamento', 'Cor',
'Sexo', 'Ganhos', 'Perdas', 'Horas_semanais', 'Pais', 'Renda')
